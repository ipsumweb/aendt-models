// <auto-generated />
using System;
using AENDiagnosticTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AENDiagnosticTracker.Migrations
{
    [DbContext(typeof(AENDiagnosticContext))]
    [Migration("20181018183537_AddEyeOtherColumnsToReport")]
    partial class AddEyeOtherColumnsToReport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AENDiagnosticTracker.Models.DiagnosticReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime?>("DOB")
                        .IsRequired();

                    b.Property<string>("DRS")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<DateTime?>("ImageCaptureDateTime");

                    b.Property<string>("LeftEyeOther")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<int?>("ManagementPlanID");

                    b.Property<string>("PatientCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientDemographicRaw");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("ReferralEntityID");

                    b.Property<int?>("ReferralTimeframeID");

                    b.Property<string>("RightEyeOther")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ManagementPlanID");

                    b.HasIndex("ReferralEntityID");

                    b.HasIndex("ReferralTimeframeID");

                    b.HasIndex("UserID");

                    b.ToTable("DiagnosticReports");
                });

            modelBuilder.Entity("AENDiagnosticTracker.Models.ICD10", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Eye")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<DateTime?>("ModifyDate");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("ICD10");
                });

            modelBuilder.Entity("AENDiagnosticTracker.Models.RecommendationPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("ID");

                    b.ToTable("RecommendationPlans");
                });

            modelBuilder.Entity("AENDiagnosticTracker.Models.ReportCode", b =>
                {
                    b.Property<int>("DiagnosticReportID");

                    b.Property<int>("ICD10ID");

                    b.HasKey("DiagnosticReportID", "ICD10ID");

                    b.HasIndex("ICD10ID");

                    b.ToTable("ReportCodes");
                });

            modelBuilder.Entity("AENDiagnosticTracker.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("KYLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LDAPID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifyDate");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AENDiagnosticTracker.Models.DiagnosticReport", b =>
                {
                    b.HasOne("AENDiagnosticTracker.Models.RecommendationPlan", "ManagementPlan")
                        .WithMany()
                        .HasForeignKey("ManagementPlanID");

                    b.HasOne("AENDiagnosticTracker.Models.RecommendationPlan", "ReferralEntity")
                        .WithMany()
                        .HasForeignKey("ReferralEntityID");

                    b.HasOne("AENDiagnosticTracker.Models.RecommendationPlan", "ReferralTimeframe")
                        .WithMany()
                        .HasForeignKey("ReferralTimeframeID");

                    b.HasOne("AENDiagnosticTracker.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AENDiagnosticTracker.Models.ReportCode", b =>
                {
                    b.HasOne("AENDiagnosticTracker.Models.DiagnosticReport", "DiagnosticReport")
                        .WithMany("ReportCodes")
                        .HasForeignKey("DiagnosticReportID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AENDiagnosticTracker.Models.ICD10", "ICD10")
                        .WithMany()
                        .HasForeignKey("ICD10ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
